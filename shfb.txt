Sandcastle HelpFile Builder

Content Layout.content
======================
<?xml version="1.0" encoding="utf-8"?>
<Topics>
  <Topic id="2caaad8a-aada-4863-b318-4a77177320a6" visible="True" isExpanded="true">
    <Topic id="d7e05719-f06e-4480-8f4a-e3ce3aeef4e0" visible="True" isSelected="true" />
    <Topic id="1ca4c146-05e0-4c23-83af-81e46d7fea68" visible="True" />
    <Topic id="26d5677f-2e60-4c43-affc-fa9e2da39c1a" visible="True" />
  </Topic>
</Topics>

doc.shfbproj
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>c0987555-6461-44fd-8407-1dcb806274f1</ProjectGuid>
    <SHFBSchemaVersion>1.9.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>doc</AssemblyName>
    <RootNamespace>doc</RootNamespace>
    <Name>doc</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>doc</HtmlHelpName>
    <Language>en-US</Language>
    <ApiFilter />
    <ComponentConfigurations />
    <DocumentationSources>
      <DocumentationSource sourceFile="..\xll.vcxproj" />
    </DocumentationSources>
    <HelpAttributes />
    <NamespaceSummaries />
    <PlugInConfigurations>
      <PlugInConfig id="Additional Content Only" enabled="True">
        <configuration />
      </PlugInConfig>
    </PlugInConfigurations>
    <BuildLogFile />
    <HtmlHelp1xCompilerPath />
    <HtmlHelp2xCompilerPath />
    <SandcastlePath />
    <WorkingPath />
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <HelpFileFormat>HtmlHelp1, Website</HelpFileFormat>
    <IndentHtml>False</IndentHtml>
    <FrameworkVersion>.NET Framework 4.0</FrameworkVersion>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CppCommentsFixup>False</CppCommentsFixup>
    <CleanIntermediates>True</CleanIntermediates>
    <WebsiteSdkLinkType>None</WebsiteSdkLinkType>
    <HtmlSdkLinkType>Msdn</HtmlSdkLinkType>
    <IncludeFavorites>False</IncludeFavorites>
    <BinaryTOC>True</BinaryTOC>
    <SyntaxFilters>VisualBasic, CPlusPlus</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceContainer>False</RootNamespaceContainer>
    <PresentationStyle>VS2010</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>Guid</NamingMethod>
    <HelpTitle>The xll add-in library</HelpTitle>
    <FeedbackEMailAddress>info%40kalx.net</FeedbackEMailAddress>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <ItemGroup>
    <ContentLayout Include="Content Layout.content" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Reference.aml" />
    <None Include="Documentation.aml" />
    <None Include="Installation.aml" />
    <None Include="Example.aml" />
    <None Include="xll.aml" />
  </ItemGroup>
  <ItemGroup>
    <Image Include="FunctionWizard.png">
      <ImageId>FunctionWizard</ImageId>
      <AlternateText>Function Wizard</AlternateText>
    </Image>
  </ItemGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>

doc.shfbproj_Keith
<?xml version="1.0" encoding="utf-16"?>
<!--DockPanel configuration file. Author: Weifen Luo, all rights reserved.-->
<!--!!! AUTOMATICALLY GENERATED FILE. DO NOT MODIFY !!!-->
<DockPanel FormatVersion="1.0" DockLeftPortion="0.25" DockRightPortion="0.25" DockTopPortion="0.25" DockBottomPortion="0.25" ActiveDocumentPane="1" ActivePane="0">
  <Contents Count="3">
    <Content ID="0" PersistString="SandcastleBuilder.Gui.ContentEditors.ProjectExplorerWindow" AutoHidePortion="0.25" IsHidden="False" IsFloat="False" />
    <Content ID="1" PersistString="SandcastleBuilder.Gui.ContentEditors.ProjectPropertiesWindow" AutoHidePortion="0.25" IsHidden="False" IsFloat="False" />
    <Content ID="2" PersistString="SandcastleBuilder.Gui.ContentEditors.OutputWindow" AutoHidePortion="0.25" IsHidden="True" IsFloat="False" />
  </Contents>
  <Panes Count="2">
    <Pane ID="0" DockState="DockRight" ActiveContent="0">
      <Contents Count="1">
        <Content ID="0" RefID="0" />
      </Contents>
    </Pane>
    <Pane ID="1" DockState="Document" ActiveContent="1">
      <Contents Count="2">
        <Content ID="0" RefID="1" />
        <Content ID="1" RefID="2" />
      </Contents>
    </Pane>
  </Panes>
  <DockWindows>
    <DockWindow ID="0" DockState="Document" ZOrderIndex="0">
      <NestedPanes Count="1">
        <Pane ID="0" RefID="1" PrevPane="-1" Alignment="Right" Proportion="0.5" />
      </NestedPanes>
    </DockWindow>
    <DockWindow ID="1" DockState="DockLeft" ZOrderIndex="2">
      <NestedPanes Count="0" />
    </DockWindow>
    <DockWindow ID="2" DockState="DockRight" ZOrderIndex="1">
      <NestedPanes Count="1">
        <Pane ID="0" RefID="0" PrevPane="-1" Alignment="Bottom" Proportion="0.5" />
      </NestedPanes>
    </DockWindow>
    <DockWindow ID="3" DockState="DockTop" ZOrderIndex="3">
      <NestedPanes Count="0" />
    </DockWindow>
    <DockWindow ID="4" DockState="DockBottom" ZOrderIndex="4">
      <NestedPanes Count="0" />
    </DockWindow>
  </DockWindows>
  <FloatWindows Count="0" />
</DockPanel>

Documentation.aml
<?xml version="1.0" encoding="utf-8"?>
<topic id="f74184c7-1ccb-465c-8213-1b83f5d840f7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Required introduction</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>

Example.aml
<?xml version="1.0" encoding="utf-8"?>
<topic id="1ca4c146-05e0-4c23-83af-81e46d7fea68" revisionNumber="1">
  <developerSampleDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Below is a complete example of how to call the <codeInline>sqrt</codeInline>
        function from the <codeInline>&lt;cmath&gt;</codeInline> standard library.
      </para>
    </introduction>

    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <codeExample>
      <code source="../test/sample.cpp" numberLines="true" />
    </codeExample>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Walkthrough</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Let's go through it line by line.
        </para>
        <para>
          Line 1 is the C++ way to include the C library functions from <codeInline>math.h</codeInline>. Remove
          the <codeInline>.h</codeInline> and prepend a <codeInline>c</codeInline>.
        </para>
        <para>
          Line 2 pulls in everything you need to create an Excel add-in.
        </para>
        <para>
          Line 4 saves you the trouble of typing <codeInline>xll::</codeInline>
        </para>
        <para>
          Line 6 is where the real action starts. When your add-in is opened
          in Excel, this object gets constructed. It tells Excel everything
          it needs to know to call your code, and let's you supply information
          to people that need to understand what your code does.
        </para>
        <para>
          Line 7 is where you can decide to create a <codeInline>Function</codeInline>,
          <codeInline>Macro</codeInline>, or <codeInline>Document</codeInline>.
          In this case it is a function that returns a <codeInline>LPOPER</codeInline>
          (which is just a pointer to an <codeInline>OPER</codeInline>), tells
          Excel the C++ name of your function, and what you want Excel to call it.
          <codeInline>OPER</codeInline>s are C++ objects that represent a cell or range of cells.
        </para>
        <para>
          You can specify the arguments your function takes using the
          <externalLink>
            <linkText>named parameter idiom</linkText>
            <linkUri>http://www.parashift.com/c++-faq/named-parameter-idiom.html</linkUri>
            <linkTarget>_blank</linkTarget>
          </externalLink>.

          Line 8 indicates the first argument is a floating point number. In the function
          wizard it will be called "Number" and the individual argument help will be
          "is a floating point number." These strings can be anything, so use your imagination
          to come up with something your users will find helpful. Another way to say this
          is <codeInline>.Arg(XLL_DOUBLE, "Number", "is a number.")</codeInline>. Intellisense will
          help you with the various types <codeInline>OPER</codeInline>'s can have.
        </para>
        <para>
          Lines 9 and 10 determine what will show up in the Function Wizard.
        </para>
        <!--           <code source="../xll/args.h" region="OPER_types" /> -->
        <mediaLink>
          <image xlink:href="FunctionWizard"/>
        </mediaLink>

        <para>
          Line 12 says the function returns a pointer to an <codeInline>OPER</codeInline>.
          <codeInline>LP</codeInline> is Microsoft speak for "long pointer" but it is
          the same as <codeInline>OPER*</codeInline>. You know
          what a pointer is and don't need to know about "long", "far", and "near"
          pointers unless you are writing code to run on a 386 running a 16-bit version
          of the Windows operating system.
          Be sure to put <codeInline>WINAPI</codeInline> between the return
          type and the function name. If you forget there will be no warning and your
          code will mysteriously fail at random times.
        </para>
        <para>
          Unlike Unix, Windows does not export functions from shared libraries by default. Line 14
          does that for you. Unlike <codeInline>WINAPI</codeInline>, if you forget this you will be warned.
        </para>
        <para>
          Since we are returning a pointer to an <codeInline>OPER</codeInline> we need to make sure
          what it is pointing at sticks around after the function returns. Line 15 declares the <codeInline>OPER</codeInline>
          to be <codeInline>static</codeInline> so the pointer being returned in line 22 isn't pointing at garbage.
        </para>
        <para>
          If you know something about C++ you might find line 18 confusing. C++ is strongly typed but
          you are assigning a double to an <codeInline>OPER</codeInline>. You can also assign a string
          and a <codeInline>bool</codeInline> to an <codeInline>OPER</codeInline> and the right thing happens.
        </para>

      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>

Installation.aml
<?xml version="1.0" encoding="utf-8"?>
<topic id="d7e05719-f06e-4480-8f4a-e3ce3aeef4e0" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
  <!-->
    <summary>
      <para>Installation</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Click on the 
        <externalLink>
		<linkText>xll library</linkText>
		<linkUri>http://kalx.net/dnload/setup.zip</linkUri>
		<linkTarget>_blank</linkTarget>
		</externalLink>
		link, then extract and run <codeInline>xll.msi</codeInline>.
      </para>
      <para>
      	Start Visual Studio 2013 and create a new project. You
      	will see Xll AddIn Project under the Visual C++ templates.
		!!!Exact directions!!!      	
      </para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Scratch">
      <title>Build from scratch</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The xll add-in library is open source so you can download it and build it yourself. etc...
        </para>
        <para>
          <link xlink:href="26d5677f-2e60-4c43-affc-fa9e2da39c1a">Dig in!</link>
        </para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>

Reference.aml
<?xml version="1.0" encoding="utf-8"?>
<topic id="26d5677f-2e60-4c43-affc-fa9e2da39c1a" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>The AddIn Class</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The purpose of the <codeInline>AddIn</codeInline> class is
          to let Excel know how to call your C++ code. The first
          thing to specify is what your function returns, what the
          C++ name of your function is, and what you want Excel to
          call it.
        </para>
        <para>
          Next you specify the arguments your function takes.
          Excel needs to know the type of the argument and what name
          and helpful description you want users to see.
        </para>
        <para>
          You can also specify what category you want your function to show up
          under and provide an indication of what your function does.
        </para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>

xll.aml
<?xml version="1.0" encoding="utf-8"?>
<topic id="2caaad8a-aada-4863-b318-4a77177320a6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Extending Excel</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Intro">
      <title>Is this library for you?</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          If you want to use VBA or C# to extend Excel you don't need this library.
          If you think wedging other procedural languages into Excel is a good 
          idea this is definitely not the library for you.
          If you know C++ and want a simple way to get the highest possible 
          performance from Excel, this is the library for you.
        </para>
        <para>
          The
          <externalLink>
            <linkText>Microsoft Excel C SDK</linkText>
            <linkUri>http://www.microsoft.com/en-us/download/details.aspx?id=35567</linkUri>
            <linkTarget>_blank</linkTarget>
          </externalLink>
          makes it possible for you extend Excel with
          functions and macros written in native code. The xll library
          provides C++ classes that make using their Software Development 
          Kit much easier.
          Just create an
          <link xlink:href="26d5677f-2e60-4c43-affc-fa9e2da39c1a">AddIn</link>
          object that specifies
          how to map your code to what Excel needs.
        </para>
        <para>
          The xll library works with all versions of Windows since XP and
          all versions of Excel since 97. You can write single source add-ins to
          also run in Excel 2007 and above that take advantage of the big grid,
          wide character strings, thread safe, cluster safe, and asynchronous functions.
        </para>
        <para>
          You can also generate documentation integrated
          with Excel help using the same tool Microsoft uses. If you want
          someone else to benefit from your handiwork, just give them the add-in,
          help file, and workbooks you put together for a portable and professional
          solution.
        </para>
        <para>
            <link xlink:href="d7e05719-f06e-4480-8f4a-e3ce3aeef4e0">Get started</link>!
        </para>
      </content>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>