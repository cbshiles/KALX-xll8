<?xml version="1.0" encoding="utf-8"?>
<topic id="2caaad8a-aada-4863-b318-4a77177320a6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>The xll library for creating Excel add-ins</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Introduction</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        The
        <externalLink>
		<linkText>Microsoft Excel C SDK</linkText>
		<linkUri>http://www.microsoft.com/en-us/download/details.aspx?id=35567</linkUri>
		<linkTarget>_blank</linkTarget>
		</externalLink>
		    makes it possible for you extend Excel with
        functions and macros written in native code. This library
        provides C++ classes that make using the SDK much easier.
        Just create an <codeInline>AddIn</codeInline> object that specifies
        how to map your code to what Excel needs. This library
        implements the machinery Excel requires to make
        your function work just like a built-in Excel function.
        </para>
        <para>
        It was designed for people that need to get the highest possible
        performance out of Excel. If you don't know C++ you will probably
        not find this useful. If you are hitting the wall with VBA
        perfomance and are willing to invest some time in getting
        up to speed with modern C++, you are going to love this.
        </para>
      </content>
      <sections>
        <section>
          <title>Example</title>
          <content>
            <para>
              Here is a complete example of how to call the <codeInline>sqrt</codeInline>
              function from the <codeInline>&lt;cmath&gt;</codeInline> standard library.
            </para>
            <code source="../test/sample.cpp" numberLines="true" />
            <para>
            Let's go through it line by line.
            </para>
            <para>
        	Line 1 is the C++ way to include the C library functions from <codeInline>math.h</codeInline>. Remove
        	the <codeInline>.h</codeInline> and prepend a <codeInline>c</codeInline>. 
            </para>
            <para>
              Line 2 pulls in everything you need to create an Excel add-in.
            </para>
            <para>
              Line 4 saves you the trouble of typing <codeInline>xll::</codeInline>
            </para>
            <para>
              Line 6 is where the real action starts. When your add-in is opened
              in Excel, this object gets constructed. It tells Excel everything
              it needs to know to call your code, and let's you supply information
              to people that need to understand what your code does.
            </para>
            <para>
              Line 7 is where you can decide to create a <codeInline>Function</codeInline>,
              <codeInline>Macro</codeInline>, or <codeInline>Document</codeInline>.
              In this case it is a function that returns a <codeInline>LPOPER</codeInline> 
              (which is just a pointer to an <codeInline>OPER</codeInline>), tells
              Excel the C++ name of your function, and what you want Excel to call it.
              <codeInline>OPER</codeInline>s are C++ objects that represent a cell or range of cells.
            </para>
            <para>
              You can specify the arguments your function takes using the
              <externalLink>
                <linkText>  parameter idiom</linkText>
                <linkUri>http://www.parashift.com/c++-faq/named-parameter-idiom.html</linkUri>
                <linkTarget>_blank</linkTarget>
              </externalLink>.
              
              Line 8 indicates the first argument is a double. In the function
              wizard it will be called "Number" and the individual argument help will be
              "is a floating point number." These strings can be anything, so use your imagination
              to come up with something your users will find helpful. Another way to say this
              is <codeInline>.Num("Number", "is a number.")</codeInline>. Intellisense will
              help you with the various types <codeInline>OPER</codeInline>'s can have.
            </para>
            <code source="../args.h" region="OPER_types" />
            <para>
              Lines 9 and 10 are self explanitory. (insert pic here)
            </para>
            <para>
              Line 12 says the function returns a pointer to an <codeInline>OPER</codeInline>.
              <codeInline>LP</codeInline> is Microsoft speak for "long pointer". It is
              the same as <codeInline>OPER*</codeInline>. You know
              what a pointer is and don't need to know about "long", "far", and "near"
              pointers unless you are writing code to run on a 386 running a 16-bit version
              of the Windows operating system.
              Be sure to put the magic <codeInline>WINAPI</codeInline> between the return
              type and the function name. If you forget there will be no warning and your
              code will mysteriously fail at random times. 
            </para>
            <para>
              Unlike Unix, Windows does not export functions from shared libraries by default. Line 14
              does that for you. Unlike <codeInline>WINAPI</codeInline>, if you forget this you will be warned.
            </para>
            <para>
              Since we are returning a pointer to an <codeInline>OPER</codeInline> we need to make sure
              what it is pointing at sticks around after the function returns. Line 15 declares the <codeInline>OPER</codeInline>
              to be <codeInline>static</codeInline> so the pointer being returned in line 22 isn't pointing at garbage.
            </para>
            <para>
              If you know something about C++ you might find line 18 confusing. C++ is strongly typed but
              you are assigning a double to an <codeInline>OPER</codeInline>. You can also assigne a string
              and a <codeInline>bool</codeInline> to an <codeInline>OPER</codeInline> and the right thing happens.
              Just pretend an <codeInline>OPER</codeInline> is whatever you want it to be. C++ is magic.
            </para>
          </content>
        </section>
      </sections>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>